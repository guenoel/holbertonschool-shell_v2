#include "shell.h"
#include <sys/types.h>
#include <sys/wait.h>

void execute_command(char *args[]) {
    pid_t pid = fork();
    if (pid == 0) { // Child process
        execvp(args[0], args);
        print_error("Error executing command");
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        print_error("Error forking");
    } else {
        wait(NULL);
    }
}


execve("/bin/ls", args, env);





#include "shell.h"

int tokenize_input(char *input, char *args[])
{
	int i = 0;
	char *token = strtok(input, " \t\n");
	while (token != NULL)
	{
		args[i] = strdup(token); // Duplicar el token
		token = strtok(NULL, " \t\n");
		i++;
	}
	args[i] = NULL;
	return i;
}
